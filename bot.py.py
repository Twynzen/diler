"""
üé≤ Unity RPG Bot - Versi√≥n Mejorada y Optimizada
Sistema RPG basado en estad√≠sticas puras sin niveles
"""

import discord
from discord import app_commands
from discord.ext import commands
import asyncio
import logging
import os
import random
import pandas as pd
import sqlite3
import gspread
from datetime import datetime
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials
import aiohttp
import hashlib

# ============= CONFIGURACI√ìN =============
class UnityConfig:
    def __init__(self):
        load_dotenv()
        self.DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
        self.BOT_NAME = os.getenv('BOT_NAME', 'UnityRPG')
        self.GUILD_NAME = os.getenv('GUILD_NAME', 'Servidor Unity')
        self.GOOGLE_CREDENTIALS_FILE = os.getenv('GOOGLE_CREDENTIALS_FILE', 'google-credentials.json')
        
        # Directorios
        self.DATA_DIR = "unity_data"
        self.EXCEL_DIR = f"{self.DATA_DIR}/personajes"
        self.IMAGES_DIR = f"{self.DATA_DIR}/imagenes"
        self.LOGS_DIR = f"{self.DATA_DIR}/logs"
        self.DB_PATH = f"{self.DATA_DIR}/unity_master.db"
        
        # Subdirectorios para im√°genes
        self.CHAR_IMAGES = f"{self.IMAGES_DIR}/personajes"
        self.NPC_IMAGES = f"{self.IMAGES_DIR}/npcs"
        self.ITEM_IMAGES = f"{self.IMAGES_DIR}/items"
        
        # Atributos base para personajes
        self.BASE_ATTRIBUTES = ['Fuerza', 'Destreza', 'Velocidad', 'Resistencia', 'Inteligencia', 'Mana']
        
        # Tipos de dados disponibles
        self.DICE_TYPES = [3, 6, 8, 10, 12, 20]
        self.MAX_DICE_COUNT = 5
        
        # Puntos de golpe fijos para todos
        self.FIXED_HP = 10
        
        self.create_directories()
        
    def create_directories(self):
        dirs = [self.DATA_DIR, self.EXCEL_DIR, self.IMAGES_DIR, self.LOGS_DIR,
                f"{self.EXCEL_DIR}/activos", f"{self.EXCEL_DIR}/archivados",
                self.CHAR_IMAGES, self.NPC_IMAGES, self.ITEM_IMAGES]
        for directory in dirs:
            os.makedirs(directory, exist_ok=True)

config = UnityConfig()

# ============= LOGGING =============
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f"{config.LOGS_DIR}/unity.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("UnityRPG")

# ============= BASE DE DATOS =============
class DatabaseManager:
    def __init__(self):
        self.db_path = config.DB_PATH
        self.init_database()
    
    def get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def init_database(self):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            
            # Verificar si necesitamos actualizar tablas NPCs
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='npcs'")
            npc_table_exists = cursor.fetchone()
            
            if npc_table_exists:
                cursor.execute("PRAGMA table_info(npcs)")
                columns = [col[1] for col in cursor.fetchall()]
                
                # Verificar si tiene las columnas viejas y necesita actualizaci√≥n
                if 'fuerza' in columns or 'puntos_vida_actual' in columns:
                    cursor.execute("DROP TABLE IF EXISTS npcs")
                    logger.info("üîÑ Recreando tabla NPCs con nueva estructura")
            
            # Personajes (sin vida)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS personajes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT UNIQUE NOT NULL,
                    usuario_id TEXT NOT NULL,
                    excel_path TEXT NOT NULL,
                    descripcion TEXT,
                    oro INTEGER DEFAULT 0,
                    estado TEXT DEFAULT 'activo',
                    imagen_url TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # NPCs - Nueva estructura
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS npcs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT UNIQUE NOT NULL,
                    tipo TEXT DEFAULT 'general',
                    ataq_fisic INTEGER DEFAULT 10,
                    ataq_dist INTEGER DEFAULT 10,
                    ataq_magic INTEGER DEFAULT 10,
                    res_fisica INTEGER DEFAULT 10,
                    res_magica INTEGER DEFAULT 10,
                    velocidad INTEGER DEFAULT 10,
                    mana INTEGER DEFAULT 10,
                    descripcion TEXT,
                    imagen_url TEXT,
                    sincronizado BOOLEAN DEFAULT FALSE,
                    cantidad INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Items
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT UNIQUE NOT NULL,
                    tipo TEXT NOT NULL,
                    subtipo TEXT,
                    rareza TEXT DEFAULT 'comun',
                    descripcion TEXT,
                    efecto_fuerza INTEGER DEFAULT 0,
                    efecto_destreza INTEGER DEFAULT 0,
                    efecto_velocidad INTEGER DEFAULT 0,
                    efecto_resistencia INTEGER DEFAULT 0,
                    efecto_inteligencia INTEGER DEFAULT 0,
                    efecto_mana INTEGER DEFAULT 0,
                    precio INTEGER DEFAULT 0,
                    es_equipable BOOLEAN DEFAULT TRUE,
                    slot_equipo TEXT DEFAULT 'general',
                    imagen_url TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Inventarios
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS inventarios (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    personaje_id INTEGER,
                    item_id INTEGER,
                    cantidad INTEGER DEFAULT 1,
                    equipado BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (personaje_id) REFERENCES personajes (id),
                    FOREIGN KEY (item_id) REFERENCES items (id)
                )
            """)
            
            conn.commit()
            logger.info("‚úÖ Base de datos inicializada correctamente")

db = DatabaseManager()

# ============= IMAGE HANDLER =============
class ImageHandler:
    @staticmethod
    async def save_image(attachment, entity_type, entity_name):
        """Guarda una imagen adjunta y retorna la URL"""
        if not attachment:
            return None
            
        try:
            dirs = {
                'personaje': config.CHAR_IMAGES,
                'npc': config.NPC_IMAGES,
                'item': config.ITEM_IMAGES
            }
            save_dir = dirs.get(entity_type, config.IMAGES_DIR)
            
            file_ext = attachment.filename.split('.')[-1]
            file_hash = hashlib.md5(f"{entity_name}_{datetime.now()}".encode()).hexdigest()[:8]
            filename = f"{entity_name}_{file_hash}.{file_ext}"
            filepath = os.path.join(save_dir, filename)
            
            await attachment.save(filepath)
            logger.info(f"‚úÖ Imagen guardada: {filename}")
            return attachment.url
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando imagen: {e}")
            return None

image_handler = ImageHandler()

# ============= GOOGLE SHEETS (OPCIONAL) =============
class GoogleSheetsManager:
    def __init__(self):
        self.client = None
        self.spreadsheet = None
        self.init_google_sheets()
    
    def init_google_sheets(self):
        try:
            if not os.path.exists(config.GOOGLE_CREDENTIALS_FILE):
                logger.info("‚ÑπÔ∏è Google Sheets no configurado - Usando solo almacenamiento local")
                return
                
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            creds = Credentials.from_service_account_file(config.GOOGLE_CREDENTIALS_FILE, scopes=scope)
            self.client = gspread.authorize(creds)
            
            try:
                self.spreadsheet = self.client.open(f"Unity RPG - {config.GUILD_NAME}")
            except gspread.SpreadsheetNotFound:
                self.spreadsheet = self.client.create(f"Unity RPG - {config.GUILD_NAME}")
                
            logger.info("‚úÖ Google Sheets conectado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Google Sheets no disponible: {e}")
    
    def sync_character(self, character_name, stats):
        if not self.client or not self.spreadsheet:
            return
        try:
            worksheet_name = f"PJ_{character_name}"
            try:
                worksheet = self.spreadsheet.worksheet(worksheet_name)
            except gspread.WorksheetNotFound:
                worksheet = self.spreadsheet.add_worksheet(title=worksheet_name, rows=20, cols=6)
            
            data = [['ATRIBUTO', 'BASE', 'BONUS', 'TOTAL']]
            for attr, values in stats.items():
                data.append([attr.title(), values['base'], values['bonus'], values['total']])
            
            worksheet.clear()
            worksheet.update('A1', data)
            logger.info(f"‚úÖ {character_name} sincronizado en Google Sheets")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è No se pudo sincronizar con Google Sheets: {e}")

google_sheets = GoogleSheetsManager()

# ============= EXCEL MANAGER =============
class ExcelManager:
    @staticmethod
    def create_character_excel(character_name, user_id, initial_stats=None):
        if initial_stats is None:
            initial_stats = {}
            
        file_path = f"{config.EXCEL_DIR}/activos/{character_name}.xlsx"
        
        character_data = {
            'Atributo': config.BASE_ATTRIBUTES,
            'Valor': [
                initial_stats.get('fuerza', 10), initial_stats.get('destreza', 10),
                initial_stats.get('velocidad', 10), initial_stats.get('resistencia', 10),
                initial_stats.get('inteligencia', 10), initial_stats.get('mana', 10)
            ]
        }
        
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            df_stats = pd.DataFrame(character_data)
            df_stats.to_excel(writer, sheet_name='Estadisticas', index=False)
            
            info_data = {
                'Campo': ['Nombre', 'Usuario_ID', 'Oro'],
                'Valor': [character_name, str(user_id), 0]
            }
            df_info = pd.DataFrame(info_data)
            df_info.to_excel(writer, sheet_name='Info', index=False)
        
        logger.info(f"‚úÖ Excel creado para {character_name}")
        return file_path
    
    @staticmethod
    def read_character_stats(character_name):
        file_path = f"{config.EXCEL_DIR}/activos/{character_name}.xlsx"
        if not os.path.exists(file_path):
            return None
            
        try:
            df = pd.read_excel(file_path, sheet_name='Estadisticas')
            stats = {}
            for _, row in df.iterrows():
                attr_name = row['Atributo'].lower()
                stats[attr_name] = {'base': int(row['Valor']), 'bonus': 0, 'total': int(row['Valor'])}
            return stats
        except Exception as e:
            logger.error(f"‚ùå Error leyendo stats: {e}")
            return None
    
    @staticmethod
    def update_character_stats(character_name, new_stats):
        file_path = f"{config.EXCEL_DIR}/activos/{character_name}.xlsx"
        if not os.path.exists(file_path):
            return False
            
        try:
            with pd.ExcelFile(file_path) as xls:
                df_stats = pd.read_excel(xls, sheet_name='Estadisticas')
                df_info = pd.read_excel(xls, sheet_name='Info')
            
            for idx, row in df_stats.iterrows():
                attr_name = row['Atributo'].lower()
                if attr_name in new_stats:
                    df_stats.at[idx, 'Valor'] = new_stats[attr_name]
            
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                df_stats.to_excel(writer, sheet_name='Estadisticas', index=False)
                df_info.to_excel(writer, sheet_name='Info', index=False)
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Error actualizando stats: {e}")
            return False

excel_manager = ExcelManager()

# ============= INVENTORY SYSTEM =============
class InventorySystem:
    @staticmethod
    def calculate_equipped_bonuses(character_name):
        bonuses = {attr: 0 for attr in ['fuerza', 'destreza', 'velocidad', 'resistencia', 'inteligencia', 'mana']}
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT i.efecto_fuerza, i.efecto_destreza, i.efecto_velocidad,
                           i.efecto_resistencia, i.efecto_inteligencia, i.efecto_mana
                    FROM inventarios inv
                    JOIN items i ON inv.item_id = i.id
                    JOIN personajes p ON inv.personaje_id = p.id
                    WHERE p.nombre = ? AND inv.equipado = TRUE
                """, (character_name,))
                
                for row in cursor.fetchall():
                    attrs = ['fuerza', 'destreza', 'velocidad', 'resistencia', 'inteligencia', 'mana']
                    for i, attr in enumerate(attrs):
                        bonuses[attr] += row[i] or 0
        except Exception as e:
            logger.error(f"‚ùå Error calculando bonuses: {e}")
        return bonuses

inventory_system = InventorySystem()

# ============= DICE SYSTEM MEJORADO =============
class DiceSystem:
    @staticmethod
    def roll_multiple_dice(dice_count, dice_type):
        """Tira m√∫ltiples dados del mismo tipo"""
        rolls = [random.randint(1, dice_type) for _ in range(dice_count)]
        return {'rolls': rolls, 'total': sum(rolls)}
    
    @staticmethod
    def roll_action(character_name, action_type, dice_count=1, dice_type=20, bonificador=0):
        base_stats = excel_manager.read_character_stats(character_name)
        if not base_stats:
            return None
        
        item_bonuses = inventory_system.calculate_equipped_bonuses(character_name)
        
        combined_stats = {}
        for attr in base_stats:
            combined_stats[attr] = {
                'base': base_stats[attr]['base'],
                'bonus': item_bonuses.get(attr, 0),
                'total': base_stats[attr]['base'] + item_bonuses.get(attr, 0)
            }
        
        # Tirar dados m√∫ltiples
        dice_result = DiceSystem.roll_multiple_dice(dice_count, dice_type)
        dice_total = dice_result['total']
        
        # Mapeo de acciones a atributos
        action_mapping = {
            'ataque_fisico': 'fuerza',
            'ataque_magico': 'mana', 
            'ataque_distancia': 'destreza',
            'defensa_fisica': 'resistencia',
            'defensa_magica': 'destreza',
            'defensa_esquive': 'velocidad'
        }
        
        if action_type not in action_mapping:
            return None
            
        attr_key = action_mapping[action_type]
        attr_value = combined_stats[attr_key]['total']
        total = dice_total + attr_value + bonificador
        
        # Verificar cr√≠ticos y pifias
        is_critical = any(roll == dice_type for roll in dice_result['rolls'])
        is_fumble = any(roll == 1 for roll in dice_result['rolls'])
        
        logger.info(f"[DADOS] {character_name} - {action_type}: {dice_count}d{dice_type}({dice_result['rolls']}) + {attr_key.title()}({attr_value}) + Bonus({bonificador}) = {total}")
        
        return {
            'dice_rolls': dice_result['rolls'], 
            'dice_total': dice_total,
            'dice_count': dice_count,
            'dice_type': dice_type,
            'attribute': attr_value, 
            'attribute_name': attr_key.title(),
            'bonuses': bonificador, 
            'total': total, 
            'action_type': action_type,
            'is_critical': is_critical, 
            'is_fumble': is_fumble
        }
    
    @staticmethod
    def npc_action(npc_name, action_type):
        """Acci√≥n de NPC (ataque o defensa) con stats fijas"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("""SELECT ataq_fisic, ataq_dist, ataq_magic, res_fisica, res_magica, velocidad,
                                sincronizado, cantidad, imagen_url FROM npcs WHERE nombre = ?""", (npc_name,))
                result = cursor.fetchone()
                
                if not result:
                    return None
                
                ataq_fisic, ataq_dist, ataq_magic, res_fisica, res_magica, velocidad, sincronizado, cantidad, imagen_url = result
                
                # Mapeo de acciones para NPCs
                action_mapping = {
                    'fisico': ataq_fisic,
                    'distancia': ataq_dist, 
                    'magico': ataq_magic,
                    'defensa_fisica': res_fisica,
                    'defensa_magica': res_magica,
                    'esquivar': velocidad
                }
                
                if action_type not in action_mapping:
                    return None
                
                base_value = action_mapping[action_type]
                
                # Si est√° sincronizado, multiplica por cantidad
                if sincronizado:
                    total_value = base_value * cantidad
                    action_description = f"{cantidad} {npc_name}s sincronizados"
                else:
                    total_value = base_value
                    action_description = f"{npc_name}"
                
                # Determinar si es ataque o defensa
                is_attack = action_type in ['fisico', 'distancia', 'magico']
                action_category = "ataque" if is_attack else "defensa"
                
                logger.info(f"[NPC {action_category.upper()}] {action_description} - {action_type}: {total_value}")
                
                return {
                    'npc_name': npc_name,
                    'action_type': action_type,
                    'action_category': action_category,
                    'base_value': base_value,
                    'total_value': total_value,
                    'sincronizado': sincronizado,
                    'cantidad': cantidad,
                    'action_description': action_description,
                    'imagen_url': imagen_url
                }
        except Exception as e:
            logger.error(f"‚ùå Error en acci√≥n NPC: {e}")
            return None

dice_system = DiceSystem()

# ============= INTERACTIVE MENUS =============

class NPCActionSelect(discord.ui.Select):
    def __init__(self, npc_name):
        self.npc_name = npc_name
        
        options = [
            # Ataques
            discord.SelectOption(label="Ataque F√≠sico", description="Da√±o fijo basado en ATAQ_FISIC", emoji="‚öîÔ∏è", value="fisico"),
            discord.SelectOption(label="Ataque M√°gico", description="Da√±o fijo basado en ATAQ_MAGIC", emoji="üîÆ", value="magico"),
            discord.SelectOption(label="Ataque a Distancia", description="Da√±o fijo basado en ATAQ_DIST", emoji="üèπ", value="distancia"),
            # Defensas
            discord.SelectOption(label="Defensa F√≠sica", description="Defensa basada en RES_FISICA", emoji="üõ°Ô∏è", value="defensa_fisica"),
            discord.SelectOption(label="Defensa M√°gica", description="Defensa basada en RES_MAGICA", emoji="‚ú®", value="defensa_magica"),
            discord.SelectOption(label="Esquivar", description="Esquive basado en VELOCIDAD", emoji="üèÉ", value="esquivar")
        ]
        
        super().__init__(placeholder="üéØ Selecciona la acci√≥n del NPC...", options=options)
    
    async def callback(self, interaction: discord.Interaction):
        result = dice_system.npc_action(self.npc_name, self.values[0])
        
        if not result:
            await interaction.response.send_message(f"‚ùå NPC **{self.npc_name}** no encontrado", ephemeral=True)
            return
        
        # Colores seg√∫n acci√≥n
        if result['action_category'] == 'ataque':
            color = 0xff4444
            if result['total_value'] >= 50:
                embed_desc = "üíÄ **¬°ATAQUE DEVASTADOR!**"
                color = 0x8b0000
            elif result['total_value'] >= 30:
                embed_desc = "‚öîÔ∏è **¬°ATAQUE PODEROSO!**"
            elif result['total_value'] >= 15:
                embed_desc = "‚úÖ **Ataque Efectivo**"
            else:
                embed_desc = "üëä **Ataque B√°sico**"
        else:  # defensa
            color = 0x4444ff
            if result['total_value'] >= 50:
                embed_desc = "üõ°Ô∏è **¬°DEFENSA IMPENETRABLE!**"
                color = 0x000080
            elif result['total_value'] >= 30:
                embed_desc = "üõ°Ô∏è **¬°DEFENSA S√ìLIDA!**"
            elif result['total_value'] >= 15:
                embed_desc = "‚úÖ **Defensa Efectiva**"
            else:
                embed_desc = "üõ°Ô∏è **Defensa B√°sica**"
        
        action_emoji = {
            'fisico': '‚öîÔ∏è', 'magico': 'üîÆ', 'distancia': 'üèπ',
            'defensa_fisica': 'üõ°Ô∏è', 'defensa_magica': '‚ú®', 'esquivar': 'üèÉ'
        }
        
        action_names = {
            'fisico': 'Ataque F√≠sico', 'magico': 'Ataque M√°gico', 'distancia': 'Ataque a Distancia',
            'defensa_fisica': 'Defensa F√≠sica', 'defensa_magica': 'Defensa M√°gica', 'esquivar': 'Esquivar'
        }
        
        emoji = action_emoji.get(result['action_type'], 'üéØ')
        action_name = action_names.get(result['action_type'], result['action_type'].title())
        
        embed = discord.Embed(title=f"üëπ {result['action_description']} - {action_name}", color=color)
        embed.description = embed_desc
        
        if result['sincronizado']:
            embed.add_field(name="ü§ù NPCs Sincronizados", value=f"{result['cantidad']} unidades", inline=True)
            embed.add_field(name="üí™ Valor Base c/u", value=f"`{result['base_value']}`", inline=True)
            value_name = "üèÜ **DA√ëO TOTAL**" if result['action_category'] == 'ataque' else "üõ°Ô∏è **DEFENSA TOTAL**"
            embed.add_field(name=value_name, value=f"**`{result['total_value']}`**", inline=True)
        else:
            embed.add_field(name="üë§ NPC Individual", value=result['npc_name'], inline=True)
            value_name = "üèÜ **DA√ëO**" if result['action_category'] == 'ataque' else "üõ°Ô∏è **DEFENSA**"
            embed.add_field(name=value_name, value=f"**`{result['total_value']}`**", inline=True)
        
        if result['imagen_url']:
            embed.set_thumbnail(url=result['imagen_url'])
        
        await interaction.response.edit_message(embed=embed, view=None)

class EquipItemSelect(discord.ui.Select):
    def __init__(self, character_name, items):
        self.character_name = character_name
        
        options = []
        for item in items[:25]:
            nombre, equipado, rareza = item[0], item[1], item[2]
            status_emoji = "‚úÖ" if equipado else "‚ö™"
            
            options.append(discord.SelectOption(
                label=nombre,
                description=f"{'Equipado' if equipado else 'No equipado'} - {rareza.title()}",
                emoji=status_emoji,
                value=nombre
            ))
        
        super().__init__(placeholder="üéí Selecciona un item para equipar/desequipar...", options=options)
    
    async def callback(self, interaction: discord.Interaction):
        item_name = self.values[0]
        
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""SELECT inv.id, inv.equipado FROM inventarios inv
                                JOIN personajes p ON inv.personaje_id = p.id
                                JOIN items i ON inv.item_id = i.id
                                WHERE p.nombre = ? AND i.nombre = ?""", (self.character_name, item_name))
                result = cursor.fetchone()
                
                if not result:
                    await interaction.response.send_message(f"‚ùå **{self.character_name}** no tiene el item **{item_name}**", ephemeral=True)
                    return
                
                inv_id, equipado = result
                
                if equipado:
                    cursor.execute("UPDATE inventarios SET equipado = FALSE WHERE id = ?", (inv_id,))
                    status = "desequipado"
                    color = 0xff6600
                    emoji = "üì§"
                else:
                    cursor.execute("UPDATE inventarios SET equipado = TRUE WHERE id = ?", (inv_id,))
                    status = "equipado"
                    color = 0x00ff00
                    emoji = "‚öîÔ∏è"
                
                conn.commit()
            
            embed = discord.Embed(title=f"{emoji} Item {status.title()}", 
                                description=f"**{item_name}** {status} por **{self.character_name}**", 
                                color=color)
            
            await interaction.response.edit_message(embed=embed, view=None)
            
        except Exception as e:
            logger.error(f"‚ùå Error equipando item: {e}")
            await interaction.response.send_message("‚ùå Error interno", ephemeral=True)

# Views
class NPCActionView(discord.ui.View):
    def __init__(self, npc_name):
        super().__init__(timeout=60)
        self.add_item(NPCActionSelect(npc_name))

class EquipItemView(discord.ui.View):
    def __init__(self, character_name, items):
        super().__init__(timeout=60)
        self.add_item(EquipItemSelect(character_name, items))

# ============= BOT SETUP =============
intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

@client.event
async def on_ready():
    logger.info(f"‚úÖ {config.BOT_NAME} conectado como {client.user}")
    try:
        synced = await tree.sync()
        logger.info(f"üì° {len(synced)} comandos sincronizados")
    except Exception as e:
        logger.error(f"‚ùå Error sincronizando: {e}")

# ============= COMANDOS PRINCIPALES =============

@tree.command(name="crear_personaje", description="Crea un personaje con 10 PG fijos")
async def create_character(interaction: discord.Interaction, nombre: str, fuerza: int = 10, destreza: int = 10, 
                         velocidad: int = 10, resistencia: int = 10, inteligencia: int = 10, mana: int = 10,
                         descripcion: str = "Un aventurero misterioso", imagen: discord.Attachment = None):
    await interaction.response.defer()
    
    try:
        imagen_url = None
        if imagen:
            imagen_url = await image_handler.save_image(imagen, 'personaje', nombre)
        
        initial_stats = {'fuerza': fuerza, 'destreza': destreza, 'velocidad': velocidad, 
                        'resistencia': resistencia, 'inteligencia': inteligencia, 'mana': mana}
        
        excel_path = excel_manager.create_character_excel(nombre, interaction.user.id, initial_stats)
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""INSERT INTO personajes (nombre, usuario_id, excel_path, descripcion, imagen_url) 
                         VALUES (?, ?, ?, ?, ?)""",
                         (nombre, str(interaction.user.id), excel_path, descripcion, imagen_url))
            conn.commit()
        
        embed = discord.Embed(title="üé≠ ¬°Personaje Creado!", description=f"**{nombre}** ha despertado en Unity", color=0x00ff00)
        embed.add_field(name="üìù Descripci√≥n", value=descripcion, inline=False)
        embed.add_field(name="‚ù§Ô∏è Puntos de Golpe", value=f"{config.FIXED_HP} PG (fijos para todos)", inline=True)
        
        stats_text = f"üí™ **Fuerza:** {fuerza}\nüéØ **Destreza:** {destreza}\n‚ö° **Velocidad:** {velocidad}\nüõ°Ô∏è **Resistencia:** {resistencia}\nüß† **Inteligencia:** {inteligencia}\nüîÆ **Man√°:** {mana}"
        embed.add_field(name="üìä Atributos", value=stats_text, inline=True)
        
        embed.add_field(name="üé≤ Sistema de Combate", 
                       value="**Ataques:**\n‚öîÔ∏è F√≠sico (Fuerza)\nüèπ Distancia (Destreza)\nüîÆ M√°gico (Man√°)\n\n**Defensas:**\nüèÉ Esquive (Velocidad)\nüõ°Ô∏è F√≠sica (Resistencia)\n‚ú® M√°gica (Destreza)", 
                       inline=True)
        
        if imagen_url:
            embed.set_thumbnail(url=imagen_url)
        
        await interaction.followup.send(embed=embed)
        
    except sqlite3.IntegrityError:
        await interaction.followup.send(f"‚ùå El personaje **{nombre}** ya existe")
    except Exception as e:
        logger.error(f"‚ùå Error creando personaje: {e}")
        await interaction.followup.send(f"‚ùå Error interno al crear **{nombre}**")

@tree.command(name="crear_npc", description="Crea un NPC con las nuevas estad√≠sticas")
async def create_npc(interaction: discord.Interaction, nombre: str, tipo: str = "general",
                    ataq_fisic: int = 10, ataq_dist: int = 10, ataq_magic: int = 10,
                    res_fisica: int = 10, res_magica: int = 10, velocidad: int = 10, mana: int = 10,
                    descripcion: str = "Un ser del universo Unity",
                    sincronizado: bool = False, cantidad: int = 1, imagen: discord.Attachment = None):
    await interaction.response.defer()
    
    try:
        imagen_url = None
        if imagen:
            imagen_url = await image_handler.save_image(imagen, 'npc', nombre)
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""INSERT INTO npcs (nombre, tipo, ataq_fisic, ataq_dist, ataq_magic,
                            res_fisica, res_magica, velocidad, mana, descripcion, 
                            sincronizado, cantidad, imagen_url) 
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                         (nombre, tipo, ataq_fisic, ataq_dist, ataq_magic, res_fisica, res_magica,
                          velocidad, mana, descripcion, sincronizado, cantidad, imagen_url))
            conn.commit()
        
        embed = discord.Embed(title="üëπ ¬°NPC Creado!", description=f"**{nombre}** a√±adido al universo", color=0xff4444)
        embed.add_field(name="üè∑Ô∏è Tipo", value=tipo.title(), inline=True)
        embed.add_field(name="‚ù§Ô∏è Puntos de Golpe", value=f"{config.FIXED_HP} PG", inline=True)
        
        if sincronizado:
            embed.add_field(name="ü§ù Sincronizado", value=f"S√≠ ({cantidad} unidades)", inline=True)
        else:
            embed.add_field(name="üë§ Individual", value="S√≠", inline=True)
        
        embed.add_field(name="üìù Descripci√≥n", value=descripcion[:200], inline=False)
        
        stats_text = f"‚öîÔ∏è ATAQ_FISIC: {ataq_fisic}\nüèπ ATAQ_DIST: {ataq_dist}\nüîÆ ATAQ_MAGIC: {ataq_magic}\nüõ°Ô∏è RES_FISICA: {res_fisica}\n‚ú® RES_MAGICA: {res_magica}\n‚ö° Velocidad: {velocidad}\nüßô Man√°: {mana}"
        embed.add_field(name="üìä Estad√≠sticas", value=stats_text, inline=True)
        
        damage_text = f"‚öîÔ∏è F√≠sico: {ataq_fisic}\nüèπ Distancia: {ataq_dist}\nüîÆ M√°gico: {ataq_magic}"
        defense_text = f"üõ°Ô∏è Defensa F√≠sica: {res_fisica}\n‚ú® Defensa M√°gica: {res_magica}\nüèÉ Esquivar: {velocidad}"
        
        if sincronizado:
            damage_text += f"\n\nü§ù **Sincronizado:**\n‚öîÔ∏è F√≠sico: {ataq_fisic * cantidad}\nüèπ Distancia: {ataq_dist * cantidad}\nüîÆ M√°gico: {ataq_magic * cantidad}"
            defense_text += f"\n\nü§ù **Sincronizado:**\nüõ°Ô∏è Def. F√≠sica: {res_fisica * cantidad}\n‚ú® Def. M√°gica: {res_magica * cantidad}\nüèÉ Esquivar: {velocidad * cantidad}"
        
        embed.add_field(name="üí• Ataques", value=damage_text, inline=True)
        embed.add_field(name="üõ°Ô∏è Defensas", value=defense_text, inline=True)
        
        if imagen_url:
            embed.set_thumbnail(url=imagen_url)
        
        await interaction.followup.send(embed=embed)
        
    except sqlite3.IntegrityError:
        await interaction.followup.send(f"‚ùå El NPC **{nombre}** ya existe")
    except Exception as e:
        logger.error(f"‚ùå Error creando NPC: {e}")
        await interaction.followup.send(f"‚ùå Error interno al crear NPC **{nombre}**")

@tree.command(name="crear_item", description="Crea un item equipable con efectos")
async def create_item(interaction: discord.Interaction, nombre: str, tipo: str, descripcion: str = "",
                     efecto_fuerza: int = 0, efecto_destreza: int = 0, efecto_velocidad: int = 0,
                     efecto_resistencia: int = 0, efecto_inteligencia: int = 0, efecto_mana: int = 0,
                     rareza: str = "comun", precio: int = 0, imagen: discord.Attachment = None):
    await interaction.response.defer()
    
    try:
        imagen_url = None
        if imagen:
            imagen_url = await image_handler.save_image(imagen, 'item', nombre)
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""INSERT INTO items (nombre, tipo, descripcion, efecto_fuerza, efecto_destreza,
                            efecto_velocidad, efecto_resistencia, efecto_inteligencia, efecto_mana,
                            rareza, precio, imagen_url)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                         (nombre, tipo, descripcion, efecto_fuerza, efecto_destreza, efecto_velocidad,
                          efecto_resistencia, efecto_inteligencia, efecto_mana, rareza, precio, imagen_url))
            conn.commit()
        
        embed = discord.Embed(title="‚ú® ¬°Item Creado!", description=f"**{nombre}** ha sido forjado", color=0x9932cc)
        embed.add_field(name="üè∑Ô∏è Tipo", value=tipo.title(), inline=True)
        embed.add_field(name="‚≠ê Rareza", value=rareza.title(), inline=True)
        embed.add_field(name="üí∞ Precio", value=f"{precio} oro", inline=True)
        
        if descripcion:
            embed.add_field(name="üìù Descripci√≥n", value=descripcion[:200], inline=False)
        
        effects = []
        effect_mapping = {
            'efecto_fuerza': ('üí™ Fuerza', efecto_fuerza),
            'efecto_destreza': ('üéØ Destreza', efecto_destreza),
            'efecto_velocidad': ('‚ö° Velocidad', efecto_velocidad),
            'efecto_resistencia': ('üõ°Ô∏è Resistencia', efecto_resistencia),
            'efecto_inteligencia': ('üß† Inteligencia', efecto_inteligencia),
            'efecto_mana': ('üîÆ Man√°', efecto_mana)
        }
        
        for key, (name, value) in effect_mapping.items():
            if value != 0:
                sign = '+' if value > 0 else ''
                effects.append(f"{name}: {sign}{value}")
        
        if effects:
            embed.add_field(name="‚ö° Efectos", value='\n'.join(effects), inline=False)
        
        if imagen_url:
            embed.set_thumbnail(url=imagen_url)
        
        await interaction.followup.send(embed=embed)
        
    except sqlite3.IntegrityError:
        await interaction.followup.send(f"‚ùå El item **{nombre}** ya existe")
    except Exception as e:
        logger.error(f"‚ùå Error creando item: {e}")
        await interaction.followup.send(f"‚ùå Error interno al crear item **{nombre}**")

# ============= COMANDOS DE BORRADO (NUEVOS) =============

@tree.command(name="borrar_personaje", description="Borra tu personaje (solo el creador puede borrarlo)")
async def delete_character(interaction: discord.Interaction, personaje: str):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # Verificar que el personaje existe y pertenece al usuario
            cursor.execute("SELECT id, usuario_id, excel_path FROM personajes WHERE nombre = ?", (personaje,))
            result = cursor.fetchone()
            
            if not result:
                await interaction.followup.send(f"‚ùå Personaje **{personaje}** no encontrado")
                return
            
            char_id, owner_id, excel_path = result
            
            if owner_id != str(interaction.user.id):
                await interaction.followup.send("‚ùå Solo puedes borrar tus propios personajes")
                return
            
            # Borrar inventario del personaje
            cursor.execute("DELETE FROM inventarios WHERE personaje_id = ?", (char_id,))
            
            # Borrar personaje de la base de datos
            cursor.execute("DELETE FROM personajes WHERE id = ?", (char_id,))
            conn.commit()
            
            # Mover archivo Excel a carpeta de archivados
            try:
                import shutil
                if os.path.exists(excel_path):
                    archived_path = excel_path.replace('/activos/', '/archivados/')
                    shutil.move(excel_path, archived_path)
                    logger.info(f"üìÅ Excel movido a archivados: {archived_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo mover Excel: {e}")
        
        embed = discord.Embed(
            title="üóëÔ∏è Personaje Borrado", 
            description=f"**{personaje}** ha sido eliminado del universo Unity", 
            color=0xff6600
        )
        embed.add_field(name="üßπ Limpieza", value="‚Ä¢ Inventario eliminado\n‚Ä¢ Archivo movido a archivados", inline=False)
        embed.set_footer(text="Esta acci√≥n no se puede deshacer")
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error borrando personaje: {e}")
        await interaction.followup.send("‚ùå Error interno al borrar personaje")

@tree.command(name="borrar_npc", description="Borra un NPC del universo")
async def delete_npc(interaction: discord.Interaction, npc: str):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # Verificar que el NPC existe
            cursor.execute("SELECT id FROM npcs WHERE nombre = ?", (npc,))
            result = cursor.fetchone()
            
            if not result:
                await interaction.followup.send(f"‚ùå NPC **{npc}** no encontrado")
                return
            
            # Borrar NPC
            cursor.execute("DELETE FROM npcs WHERE nombre = ?", (npc,))
            conn.commit()
        
        embed = discord.Embed(
            title="üóëÔ∏è NPC Borrado", 
            description=f"**{npc}** ha sido eliminado del universo Unity", 
            color=0xff6600
        )
        embed.set_footer(text="Esta acci√≥n no se puede deshacer")
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error borrando NPC: {e}")
        await interaction.followup.send("‚ùå Error interno al borrar NPC")

# ============= COMANDOS DE TIRADAS SIMPLIFICADOS =============

@tree.command(name="tirar", description="Tirada directa con par√°metros")
@app_commands.describe(
    personaje="Nombre del personaje",
    tipo_dado="Tipo de dado (3, 6, 8, 10, 12, 20)",
    cantidad="Cantidad de dados (1-5)",
    accion="Tipo de acci√≥n",
    bonificador="Bonificador adicional"
)
@app_commands.choices(tipo_dado=[
    app_commands.Choice(name="d3", value=3),
    app_commands.Choice(name="d6", value=6),
    app_commands.Choice(name="d8", value=8),
    app_commands.Choice(name="d10", value=10),
    app_commands.Choice(name="d12", value=12),
    app_commands.Choice(name="d20", value=20)
])
@app_commands.choices(cantidad=[
    app_commands.Choice(name="1 dado", value=1),
    app_commands.Choice(name="2 dados", value=2),
    app_commands.Choice(name="3 dados", value=3),
    app_commands.Choice(name="4 dados", value=4),
    app_commands.Choice(name="5 dados", value=5)
])
@app_commands.choices(accion=[
    app_commands.Choice(name="Ataque F√≠sico", value="ataque_fisico"),
    app_commands.Choice(name="Ataque M√°gico", value="ataque_magico"),
    app_commands.Choice(name="Ataque Distancia", value="ataque_distancia"),
    app_commands.Choice(name="Defensa F√≠sica", value="defensa_fisica"),
    app_commands.Choice(name="Defensa M√°gica", value="defensa_magica"),
    app_commands.Choice(name="Defensa Esquive", value="defensa_esquive")
])
async def roll_dice(interaction: discord.Interaction, personaje: str, tipo_dado: int, cantidad: int, accion: str, bonificador: int = 0):
    await interaction.response.defer()
    
    try:
        # Validaciones
        if tipo_dado not in config.DICE_TYPES:
            await interaction.followup.send("‚ùå Tipo de dado inv√°lido. Usa: 3, 6, 8, 10, 12, 20")
            return
        
        if cantidad < 1 or cantidad > config.MAX_DICE_COUNT:
            await interaction.followup.send(f"‚ùå Cantidad de dados debe ser entre 1 y {config.MAX_DICE_COUNT}")
            return
        
        # Ejecutar tirada
        result = dice_system.roll_action(personaje, accion, cantidad, tipo_dado, bonificador)
        
        if not result:
            await interaction.followup.send(f"‚ùå Personaje **{personaje}** no encontrado")
            return
        
        # Obtener imagen del personaje
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT imagen_url FROM personajes WHERE nombre = ?", (personaje,))
                imagen_result = cursor.fetchone()
                imagen_url = imagen_result[0] if imagen_result else None
        except:
            imagen_url = None
        
        # Determinar color y descripci√≥n
        if 'ataque' in result['action_type']:
            color = 0x00ff00 if result['total'] >= 18 else 0xff6600 if result['total'] >= 12 else 0xff0000
            action_emoji = "‚öîÔ∏è" if 'fisico' in result['action_type'] else "üîÆ" if 'magico' in result['action_type'] else "üèπ"
        else:
            color = 0x0099ff if result['total'] >= 15 else 0xff6600 if result['total'] >= 12 else 0xff0000
            action_emoji = "üõ°Ô∏è" if 'fisica' in result['action_type'] else "‚ú®" if 'magica' in result['action_type'] else "üèÉ"
        
        action_name = result['action_type'].replace('_', ' ').title()
        embed = discord.Embed(title=f"{action_emoji} {action_name} - {personaje}", color=color)
        
        if result['is_critical']:
            embed.description = "üéØ **¬°CR√çTICO DEVASTADOR!**"
            embed.color = 0xffd700
        elif result['is_fumble']:
            embed.description = "üí• **¬°PIFIA √âPICA!**"
            embed.color = 0x8b0000
        elif result['total'] >= 25:
            embed.description = "üåü **¬°RESULTADO LEGENDARIO!**"
        elif result['total'] >= 15:
            embed.description = "‚úÖ **Resultado Exitoso**"
        else:
            embed.description = "‚ùå **Resultado Fallido**"
        
        # Mostrar dados de forma clara
        dice_display = ' + '.join(map(str, result['dice_rolls']))
        embed.add_field(name=f"üé≤ {result['dice_count']}d{result['dice_type']}", value=f"`{dice_display}` = `{result['dice_total']}`", inline=True)
        embed.add_field(name=f"üìä {result['attribute_name']}", value=f"`{result['attribute']}`", inline=True)
        if bonificador != 0:
            embed.add_field(name="‚ûï Bonus", value=f"`{bonificador}`", inline=True)
        embed.add_field(name="üèÜ **TOTAL**", value=f"**`{result['total']}`**", inline=False)
        
        if imagen_url:
            embed.set_thumbnail(url=imagen_url)
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error en tirada: {e}")
        await interaction.followup.send("‚ùå Error interno")

@tree.command(name="tirada_npc", description="Ejecuta ataques y defensas de NPCs con stats fijas")
async def npc_roll(interaction: discord.Interaction, npc: str):
    try:
        # Verificar que el NPC existe
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT nombre, sincronizado, cantidad FROM npcs WHERE nombre = ?", (npc,))
            result = cursor.fetchone()
            
            if not result:
                await interaction.response.send_message(f"‚ùå NPC **{npc}** no encontrado", ephemeral=True)
                return
            
            nombre, sincronizado, cantidad = result
        
        embed = discord.Embed(title=f"üëπ {npc} - Seleccionar Acci√≥n", 
                            description="Elige el tipo de acci√≥n del NPC:", color=0xff4444)
        
        if sincronizado:
            embed.add_field(name="ü§ù NPCs Sincronizados", value=f"{cantidad} unidades", inline=True)
            embed.add_field(name="üí• Valores", value="Base √ó Cantidad", inline=True)
        else:
            embed.add_field(name="üë§ NPC Individual", value="Valores fijos", inline=True)
        
        embed.add_field(name="üéØ Acciones Disponibles", 
                       value="**Ataques:** ‚öîÔ∏è F√≠sico, üîÆ M√°gico, üèπ Distancia\n**Defensas:** üõ°Ô∏è F√≠sica, ‚ú® M√°gica, üèÉ Esquivar", 
                       inline=False)
        
        view = NPCActionView(npc)
        await interaction.response.send_message(embed=embed, view=view)
        
    except Exception as e:
        logger.error(f"‚ùå Error en tirada NPC: {e}")
        await interaction.response.send_message("‚ùå Error interno", ephemeral=True)

# ============= COMANDOS DE EDICI√ìN =============

@tree.command(name="editar_personaje", description="Edita las estad√≠sticas e imagen de tu personaje")
async def edit_character(interaction: discord.Interaction, personaje: str, 
                        fuerza: int = None, destreza: int = None, velocidad: int = None,
                        resistencia: int = None, inteligencia: int = None, mana: int = None,
                        oro: int = None, imagen: discord.Attachment = None):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT usuario_id FROM personajes WHERE nombre = ?", (personaje,))
            result = cursor.fetchone()
            
            if not result:
                await interaction.followup.send(f"‚ùå Personaje **{personaje}** no encontrado")
                return
                
            if result[0] != str(interaction.user.id):
                await interaction.followup.send("‚ùå Solo puedes editar tus propios personajes")
                return
        
        # Actualizar imagen si se proporciona
        imagen_url = None
        if imagen:
            imagen_url = await image_handler.save_image(imagen, 'personaje', personaje)
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE personajes SET imagen_url = ? WHERE nombre = ?", (imagen_url, personaje))
                conn.commit()
        
        new_stats = {}
        if fuerza is not None: new_stats['fuerza'] = fuerza
        if destreza is not None: new_stats['destreza'] = destreza
        if velocidad is not None: new_stats['velocidad'] = velocidad
        if resistencia is not None: new_stats['resistencia'] = resistencia
        if inteligencia is not None: new_stats['inteligencia'] = inteligencia
        if mana is not None: new_stats['mana'] = mana
        
        if new_stats:
            excel_manager.update_character_stats(personaje, new_stats)
        
        if oro is not None:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE personajes SET oro = ? WHERE nombre = ?", (oro, personaje))
                conn.commit()
        
        embed = discord.Embed(title="‚úèÔ∏è Personaje Editado", 
                            description=f"**{personaje}** actualizado exitosamente", 
                            color=0x00ff00)
        
        if new_stats:
            stats_text = '\n'.join([f"‚Ä¢ **{k.title()}:** {v}" for k, v in new_stats.items()])
            embed.add_field(name="üìä Estad√≠sticas Actualizadas", value=stats_text[:1024], inline=False)
        
        if imagen:
            embed.add_field(name="üñºÔ∏è Imagen", value="Actualizada", inline=True)
            if imagen_url:
                embed.set_thumbnail(url=imagen_url)
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error editando personaje: {e}")
        await interaction.followup.send("‚ùå Error interno")

@tree.command(name="editar_npc", description="Edita las estad√≠sticas de un NPC")
async def edit_npc(interaction: discord.Interaction, npc: str,
                  ataq_fisic: int = None, ataq_dist: int = None, ataq_magic: int = None,
                  res_fisica: int = None, res_magica: int = None, velocidad: int = None, mana: int = None,
                  sincronizado: bool = None, cantidad: int = None):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT id FROM npcs WHERE nombre = ?", (npc,))
            if not cursor.fetchone():
                await interaction.followup.send(f"‚ùå NPC **{npc}** no encontrado")
                return
            
            updates = []
            params = []
            
            if ataq_fisic is not None:
                updates.append("ataq_fisic = ?")
                params.append(ataq_fisic)
            if ataq_dist is not None:
                updates.append("ataq_dist = ?")
                params.append(ataq_dist)
            if ataq_magic is not None:
                updates.append("ataq_magic = ?")
                params.append(ataq_magic)
            if res_fisica is not None:
                updates.append("res_fisica = ?")
                params.append(res_fisica)
            if res_magica is not None:
                updates.append("res_magica = ?")
                params.append(res_magica)
            if velocidad is not None:
                updates.append("velocidad = ?")
                params.append(velocidad)
            if mana is not None:
                updates.append("mana = ?")
                params.append(mana)
            if sincronizado is not None:
                updates.append("sincronizado = ?")
                params.append(sincronizado)
            if cantidad is not None:
                updates.append("cantidad = ?")
                params.append(cantidad)
            
            if updates:
                params.append(npc)
                query = f"UPDATE npcs SET {', '.join(updates)} WHERE nombre = ?"
                cursor.execute(query, params)
                conn.commit()
        
        embed = discord.Embed(title="‚úèÔ∏è NPC Editado", 
                            description=f"**{npc}** actualizado exitosamente", 
                            color=0xff4444)
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error editando NPC: {e}")
        await interaction.followup.send("‚ùå Error interno")

# ============= COMANDOS DE INVENTARIO =============

@tree.command(name="equipar_menu", description="Men√∫ interactivo para equipar/desequipar items")
async def equip_menu(interaction: discord.Interaction, personaje: str):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT i.nombre, inv.equipado, i.rareza
                FROM inventarios inv
                JOIN items i ON inv.item_id = i.id
                JOIN personajes p ON inv.personaje_id = p.id
                WHERE p.nombre = ? AND i.es_equipable = TRUE
                ORDER BY inv.equipado DESC, i.nombre
            """, (personaje,))
            items = cursor.fetchall()
        
        if not items:
            await interaction.followup.send(f"‚ùå **{personaje}** no tiene items equipables")
            return
        
        embed = discord.Embed(title=f"üéí Equipar Items - {personaje}", 
                            description="Selecciona un item para equipar o desequipar:", 
                            color=0x9932cc)
        
        view = EquipItemView(personaje, items)
        await interaction.followup.send(embed=embed, view=view)
        
    except Exception as e:
        logger.error(f"‚ùå Error mostrando men√∫ equipar: {e}")
        await interaction.followup.send("‚ùå Error interno")

@tree.command(name="dar_item", description="Entrega un item a un personaje")
async def give_item(interaction: discord.Interaction, personaje: str, item: str, cantidad: int = 1):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT id FROM personajes WHERE nombre = ?", (personaje,))
            char_result = cursor.fetchone()
            if not char_result:
                await interaction.followup.send(f"‚ùå Personaje **{personaje}** no encontrado")
                return
            
            cursor.execute("SELECT id, nombre FROM items WHERE nombre = ?", (item,))
            item_result = cursor.fetchone()
            if not item_result:
                await interaction.followup.send(f"‚ùå Item **{item}** no encontrado")
                return
            
            char_id, item_id = char_result[0], item_result[0]
            
            cursor.execute("SELECT id, cantidad FROM inventarios WHERE personaje_id = ? AND item_id = ?", 
                         (char_id, item_id))
            existing = cursor.fetchone()
            
            if existing:
                cursor.execute("UPDATE inventarios SET cantidad = cantidad + ? WHERE id = ?", 
                             (cantidad, existing[0]))
                new_cantidad = existing[1] + cantidad
            else:
                cursor.execute("INSERT INTO inventarios (personaje_id, item_id, cantidad) VALUES (?, ?, ?)",
                             (char_id, item_id, cantidad))
                new_cantidad = cantidad
            
            conn.commit()
        
        embed = discord.Embed(title="üéÅ Item Entregado", 
                            description=f"**{item}** x{cantidad} entregado a **{personaje}**", 
                            color=0x00ff00)
        embed.add_field(name="üì¶ Total en Inventario", value=f"{new_cantidad} unidades", inline=True)
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error dando item: {e}")
        await interaction.followup.send("‚ùå Error interno")

@tree.command(name="inventario", description="Muestra el inventario de un personaje")
async def show_inventory(interaction: discord.Interaction, personaje: str):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT i.nombre, i.tipo, i.rareza, inv.cantidad, inv.equipado,
                       i.efecto_fuerza, i.efecto_destreza, i.efecto_velocidad,
                       i.efecto_resistencia, i.efecto_inteligencia, i.efecto_mana
                FROM inventarios inv
                JOIN items i ON inv.item_id = i.id
                JOIN personajes p ON inv.personaje_id = p.id
                WHERE p.nombre = ?
                ORDER BY inv.equipado DESC, i.nombre
            """, (personaje,))
            inventory = cursor.fetchall()
        
        if not inventory:
            await interaction.followup.send(f"‚ùå **{personaje}** no tiene items o no existe")
            return
        
        embed = discord.Embed(title=f"üéí Inventario de {personaje}", color=0x9932cc)
        
        equipped_items = []
        regular_items = []
        
        for item in inventory:
            nombre, tipo, rareza, cantidad, equipado = item[0], item[1], item[2], item[3], item[4]
            
            rarity_emoji = {"comun": "‚ö™", "raro": "üîµ", "epico": "üü£", "legendario": "üü†"}.get(rareza, "‚ö™")
            equip_status = "‚úÖ Equipado" if equipado else ""
            item_line = f"{rarity_emoji} **{nombre}** x{cantidad} {equip_status}"
            
            if equipado:
                equipped_items.append(item_line)
            else:
                regular_items.append(item_line)
        
        if equipped_items:
            embed.add_field(name="‚öîÔ∏è Items Equipados", value='\n'.join(equipped_items[:10]), inline=False)
        
        if regular_items:
            chunks = [regular_items[i:i+10] for i in range(0, len(regular_items), 10)]
            for i, chunk in enumerate(chunks[:2]):
                field_name = "üì¶ Items en Inventario" if i == 0 else "üì¶ M√°s Items"
                embed.add_field(name=field_name, value='\n'.join(chunk), inline=False)
        
        embed.set_footer(text=f"Total de tipos de items: {len(inventory)}")
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error mostrando inventario: {e}")
        await interaction.followup.send("‚ùå Error interno")

# ============= COMANDOS DE INFORMACI√ìN =============

@tree.command(name="info_npc", description="Informaci√≥n completa de un NPC")
async def npc_info(interaction: discord.Interaction, npc: str):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM npcs WHERE nombre = ?", (npc,))
            npc_data = cursor.fetchone()
        
        if not npc_data:
            await interaction.followup.send(f"‚ùå NPC **{npc}** no encontrado")
            return
        
        embed = discord.Embed(
            title=f"üëπ {npc_data[1]}", 
            description=npc_data[10] or "Un ser misterioso del universo Unity", 
            color=0xff4444
        )
        
        embed.add_field(name="üè∑Ô∏è Tipo", value=npc_data[2].title(), inline=True)
        embed.add_field(name="‚ù§Ô∏è Puntos de Golpe", value=f"{config.FIXED_HP} PG", inline=True)
        
        # Campos de sincronizaci√≥n
        sincronizado = npc_data[12] if len(npc_data) > 12 else False
        cantidad = npc_data[13] if len(npc_data) > 13 else 1
        
        if sincronizado:
            embed.add_field(name="ü§ù Sincronizado", value=f"S√≠ ({cantidad} unidades)", inline=True)
        else:
            embed.add_field(name="üë§ Individual", value="S√≠", inline=True)
        
        stats_text = f"‚öîÔ∏è **ATAQ_FISIC:** {npc_data[3]}\n"
        stats_text += f"üèπ **ATAQ_DIST:** {npc_data[4]}\n"
        stats_text += f"üîÆ **ATAQ_MAGIC:** {npc_data[5]}\n"
        stats_text += f"üõ°Ô∏è **RES_FISICA:** {npc_data[6]}\n"
        stats_text += f"‚ú® **RES_MAGICA:** {npc_data[7]}\n"
        stats_text += f"‚ö° **Velocidad:** {npc_data[8]}\n"
        stats_text += f"üßô **Man√°:** {npc_data[9]}"
        
        embed.add_field(name="üìä Estad√≠sticas", value=stats_text, inline=True)
        
        damage_text = f"**Ataques:**\n"
        damage_text += f"‚öîÔ∏è F√≠sico: {npc_data[3]}\n"
        damage_text += f"üèπ Distancia: {npc_data[4]}\n"
        damage_text += f"üîÆ M√°gico: {npc_data[5]}"
        
        defense_text = f"**Defensas:**\n"
        defense_text += f"üõ°Ô∏è F√≠sica: {npc_data[6]}\n"
        defense_text += f"‚ú® M√°gica: {npc_data[7]}\n"
        defense_text += f"üèÉ Esquivar: {npc_data[8]}"
        
        if sincronizado:
            damage_text += f"\n\n**Sincronizado:**\n"
            damage_text += f"‚öîÔ∏è F√≠sico: {npc_data[3] * cantidad}\n"
            damage_text += f"üèπ Distancia: {npc_data[4] * cantidad}\n"
            damage_text += f"üîÆ M√°gico: {npc_data[5] * cantidad}"
            
            defense_text += f"\n\n**Sincronizado:**\n"
            defense_text += f"üõ°Ô∏è F√≠sica: {npc_data[6] * cantidad}\n"
            defense_text += f"‚ú® M√°gica: {npc_data[7] * cantidad}\n"
            defense_text += f"üèÉ Esquivar: {npc_data[8] * cantidad}"
        
        embed.add_field(name="üí• Ataques", value=damage_text, inline=True)
        embed.add_field(name="üõ°Ô∏è Defensas", value=defense_text, inline=True)
        
        if npc_data[11]:  # imagen_url
            embed.set_thumbnail(url=npc_data[11])
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error mostrando info NPC: {e}")
        await interaction.followup.send("‚ùå Error interno")

@tree.command(name="info_personaje", description="Informaci√≥n completa de un personaje")
async def character_info(interaction: discord.Interaction, personaje: str):
    await interaction.response.defer()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM personajes WHERE nombre = ?", (personaje,))
            char_data = cursor.fetchone()
        
        if not char_data:
            await interaction.followup.send(f"‚ùå Personaje **{personaje}** no encontrado")
            return
        
        base_stats = excel_manager.read_character_stats(personaje)
        item_bonuses = inventory_system.calculate_equipped_bonuses(personaje)
        
        if not base_stats:
            await interaction.followup.send(f"‚ùå No se pudieron cargar las estad√≠sticas de **{personaje}**")
            return
        
        combined_stats = {}
        for attr in base_stats:
            combined_stats[attr] = {
                'base': base_stats[attr]['base'],
                'bonus': item_bonuses.get(attr, 0),
                'total': base_stats[attr]['base'] + item_bonuses.get(attr, 0)
            }
        
        embed = discord.Embed(title=f"üé≠ {personaje}", description=char_data[4] or "Un aventurero misterioso", color=0x9932cc)
        
        embed.add_field(name="‚ù§Ô∏è Puntos de Golpe", value=f"{config.FIXED_HP} PG", inline=True)
        embed.add_field(name="üí∞ Oro", value=str(char_data[5]), inline=True)
        embed.add_field(name="üìù Estado", value=char_data[6].title(), inline=True)
        
        main_attrs = ['fuerza', 'destreza', 'velocidad', 'resistencia', 'inteligencia', 'mana']
        stats_text = ""
        for attr in main_attrs:
            if attr in combined_stats:
                s = combined_stats[attr]
                emoji = {'fuerza': 'üí™', 'destreza': 'üéØ', 'velocidad': '‚ö°', 'resistencia': 'üõ°Ô∏è', 'inteligencia': 'üß†', 'mana': 'üîÆ'}[attr]
                bonus_text = f" (+{s['bonus']})" if s['bonus'] > 0 else f" ({s['bonus']})" if s['bonus'] < 0 else ""
                stats_text += f"{emoji} **{attr.title()}:** {s['total']} ({s['base']}{bonus_text})\n"
        
        embed.add_field(name="üìä Atributos", value=stats_text, inline=False)
        
        if char_data[7]:  # imagen_url
            embed.set_thumbnail(url=char_data[7])
        
        google_sheets.sync_character(personaje, combined_stats)
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        logger.error(f"‚ùå Error mostrando info: {e}")
        await interaction.followup.send("‚ùå Error interno")

# ============= INICIALIZACI√ìN =============
def create_default_content():
    """Crea contenido por defecto"""
    default_items = [
        ("Espada de Acero", "arma", "Espada b√°sica de acero", 3, 0, 0, 0, 0, 0, "raro", 50),
        ("Armadura de Cuero", "armadura", "Armadura ligera de cuero", 0, 1, 0, 2, 0, 0, "comun", 30),
        ("Amuleto M√°gico", "accesorio", "Aumenta poder m√°gico", 0, 0, 0, 0, 2, 3, "epico", 200)
    ]
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            for item_data in default_items:
                cursor.execute("""INSERT OR IGNORE INTO items (nombre, tipo, descripcion, efecto_fuerza, efecto_destreza,
                                efecto_velocidad, efecto_resistencia, efecto_inteligencia, efecto_mana,
                                rareza, precio) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""", item_data)
            conn.commit()
        logger.info("‚úÖ Contenido por defecto creado")
    except Exception as e:
        logger.error(f"‚ùå Error creando contenido por defecto: {e}")

async def main():
    try:
        create_default_content()
        logger.info("üöÄ Iniciando Unity RPG Bot...")
        await client.start(config.DISCORD_TOKEN)
    except Exception as e:
        logger.error(f"üí• Error cr√≠tico: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot detenido por el usuario")
    except Exception as e:
        logger.error(f"üí• Error fatal: {e}")
    finally:
        logger.info("üëã Unity RPG Bot cerrado")